#!/usr/bin/env bash

set -eufo pipefail

test -z ${DEBUG+x} || set -x

# Transform deprecated options to new style options and print warning
# 'SPLUNK_HOST=example.com' => 'SPLUNKHEC_OPTION_host=example.com'

function splunkhec_compatability_options() {
  local old_options=$(echo SPLUNK_{HOST,PROTOCOL,PORT,TOKEN,INDEX,EVENT_HOST,SOURCE,SOURCETYPE,SEND_EVENT_AS_JSON,USEJSON,SEND_BATCHED_EVENTS})
  for old_option in $old_options; do
    test -z ${!old_option+x} && continue

    # SPLUNK_PORT might be set by Kubernetes. If it is, ignore it
    [[ ${old_option} = "SPLUNK_PORT" ]] && [[ ${!old_option} =~ ^tcp:// ]] && continue

    option=$(env | grep "^${old_option}=" | tail -n1)
    echo >&2 "WARNING: Deprecated option used. This will be removed in the future. Please use SPLUNKHEC_OPTION_key=value: '${option/=*/}'"

    option=${option/SPLUNK_/SPLUNKHEC_OPTION_}
    key_upper=${option/SPLUNKHEC_OPTION_/}
    key_upper=${key_upper/=*/}
    key_lower=$(echo ${key_upper} | tr '[:upper:]' '[:lower:]')

    option=${option/${key_upper}/${key_lower}}
    export ${option}
  done
}

# Set default options for splunkhec

function splunkhec_default_options() {
  export SPLUNKHEC_OPTION_host=${SPLUNKHEC_OPTION_host:-splunk.logging}
  export SPLUNKHEC_OPTION_protocol=${SPLUNKHEC_OPTION_protocol:-https}
  export SPLUNKHEC_OPTION_port=${SPLUNKHEC_OPTION_port:-8088}
  export SPLUNKHEC_OPTION_token=${SPLUNKHEC_OPTION_token:-00000000-0000-0000-0000-000000000000}
  export SPLUNKHEC_OPTION_sourcetype=${SPLUNKHEC_OPTION_sourcetype:-kubernetes}
  export SPLUNKHEC_OPTION_send_event_as_json=${SPLUNKHEC_OPTION_send_event_as_json:-true}
  export SPLUNKHEC_OPTION_usejson=${SPLUNKHEC_OPTION_usejson:-true}
}

# Generate fluentd configuration for splunkhec
# 'SPLUNKHEC_OPTION_host=example.com' => 'host example.com'

function splunkhec_final_options() {
  SPLUNKHEC_OPTIONS=""

  for option in $(env | grep '^SPLUNKHEC_OPTION_'); do
    option=${option/SPLUNKHEC_OPTION_/}
    option=${option/=/ }
    SPLUNKHEC_OPTIONS=$(echo -e "${SPLUNKHEC_OPTIONS}\n  ${option}")
  done

  export SPLUNKHEC_OPTIONS
}

# Set default options for kubernetes_metadata_filter

function k8s_metadata_filter_default_options() {
  export K8S_METADATA_FILTER_OPTION_preserve_json_log=${K8S_METADATA_FILTER_OPTION_preserve_json_log:-"false"}
}

# Generate fluentd configuration for kubernetes_metadata_filter
# 'K8S_METADATA_FILTER_OPTION_preserve_json_log=false' => 'preserve_json_log false'

function k8s_metadata_filter_final_options() {
  K8S_METADATA_FILTER_OPTIONS=""

  for option in $(env | grep '^K8S_METADATA_FILTER_OPTION_'); do
    option=${option/K8S_METADATA_FILTER_OPTION_/}
    option=${option/=/ }
    K8S_METADATA_FILTER_OPTIONS=$(echo -e "${K8S_METADATA_FILTER_OPTIONS}\n  ${option}")
  done

  export K8S_METADATA_FILTER_OPTIONS
}

# Generate configuration and exec into fluentd

splunkhec_compatability_options
splunkhec_default_options
splunkhec_final_options

k8s_metadata_filter_default_options
k8s_metadata_filter_final_options

confdir="/etc/td-agent"

cat ${confdir}/td-agent.conf.template | envsubst '$K8S_METADATA_FILTER_OPTIONS $SPLUNKHEC_OPTIONS' > ${confdir}/td-agent.conf
exec fluentd -c ${confdir}/td-agent.conf "$@"
